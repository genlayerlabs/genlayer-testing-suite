name: Continuous Delivery

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  run-tests:
    name: Run Tests
    uses: ./.github/workflows/tests.yml

  release-and-upload:
    name: Release and Upload Artifacts
    runs-on: ubuntu-latest
    needs: run-tests

    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      contents: write

    outputs:
      released: ${{ steps.release.outputs.released }}
      commit_sha: ${{ steps.get-commit.outputs.commit_sha }}

    steps:
      - name: Setup | Get CI Bot Token
        uses: tibdex/github-app-token@v1
        id: ci_bot_token
        with:
          app_id: ${{ secrets.CI_BOT_APP_ID }}
          private_key: ${{ secrets.CI_BOT_SECRET }}

      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          token: ${{ steps.ci_bot_token.outputs.token }}

      - name: Check | Verify Upstream Unchanged
        shell: bash
        run: |
          chmod +x scripts/verify-upstream.sh
          ./scripts/verify-upstream.sh ${{ github.sha }}

      - name: Setup | Initialize Git User
        run: |
          git config --global user.email "github-actions[bot]@genlayerlabs.com"
          git config --global user.name "github-actions[bot]"

      - name: Setup | Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup | Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release==10.0.2 build==1.2.2.post1

      - name: Action | Semantic Version Release
        id: release
        env:
          GH_TOKEN: ${{ steps.ci_bot_token.outputs.token }}
        run: |
          chmod +x scripts/semantic-version-release.sh
          ./scripts/semantic-version-release.sh releaserc.toml

      - name: Get | Current Commit SHA
        id: get-commit
        run: echo "commit_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Build | Clean Previous Builds
        if: steps.release.outputs.released == 'true'
        run: |
          rm -rf -- dist build *.egg-info

      - name: Build | Create Distribution Package
        if: steps.release.outputs.released == 'true'
        run: python -m build

      - name: Upload | Distribution Artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

  publish-to-pypi:
    name: Publish Package to PyPI
    needs: release-and-upload
    runs-on: ubuntu-latest
    if: ${{ needs.release-and-upload.outputs.released == 'true' }}

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-and-upload.outputs.commit_sha }}
          fetch-depth: 0

      - name: Setup | Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup | Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install twine==6.1.0

      - name: Download | Distribution Artifacts
        uses: actions/download-artifact@v5
        with:
          name: distribution-artifacts
          path: dist

      - name: Publish | Upload to PyPI
        run: |
          if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "Missing PyPI API token"; exit 1;
          fi
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
